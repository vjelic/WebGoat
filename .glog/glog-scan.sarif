{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "GLOG",
          "organization": "GLOG",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "884e780e-690f-4d81-91ad-dfcf22d794e8",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "fbe19599-1020-4833-aa7d-b309e77eeaa3",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "775b78fa-93a1-4951-93d8-ff02f33557c9",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "25fbe361-b8b9-4fb5-93c0-ac74169e0eea",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "8931d673-0399-45df-be7c-de3b662ce6cb",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "356d3053-1b86-4dfb-bab9-5952fb99d546",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "eac8191d-37de-43ef-9e5e-a817fda6badf",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "3c159d4e-8b85-4945-8e51-6b83006c8772",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: userId<br/><pre>Field name: verifyMethod<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "0822318d-ae95-4628-b5f2-63ebb4f337be",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: select<br/><pre>Field name: radio<br/><pre>Field name: checkbox<br/><pre>Field name: shortInput<br/><pre>Field name: readOnlyInput<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "9f8355be-58c7-4a85-831e-e21fa1005a99",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: field1<br/><pre>Field name: field2<br/><pre>Field name: field3<br/><pre>Field name: field4<br/><pre>Field name: field5<br/><pre>Field name: field6<br/><pre>Field name: field7<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "43fa613f-7fcb-4f62-97a7-c3e98fb7830c",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: flag<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b2b44d7c-34e1-474e-b1cd-d70482000d28",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: username<br/>Validation regex: \"^[a-zA-Z0-9._-]{3,}$\"<br/>Validation length: MIN: 3 MAX: 30<br/>Example: \"John_Doe123\"<br/><pre>Field name: password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "7aea8f04-ea2a-47e4-9e73-b107ebc0bd8a",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: username_login<br/><pre>Field name: password_login<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "a61aaafd-0d01-469f-b0f0-2651283d5812",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: link<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b9723dde-20f0-4e6c-82c4-602de985ed83",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: email<br/>Validation regex: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z](2, 6)$\"<br/>Validation length: MIN: 6 MAX: 254<br/>Example: \"john_doe@example.com\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "f5053a2f-7550-42de-a6cf-d8249cb8ab28",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "f9dad078-04ef-4d1b-9d19-b1c321240e01",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: successMessage<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "1dc38dee-bd9f-4a05-ba1c-a605c8fbdbc6",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: network_num<br/><pre>Field name: number<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "16ab2d68-b928-435b-95a5-d3a3883ded00",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: networkNum<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "86c6d30d-3013-4eb1-8557-fd2e1a64ddd0",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "23d8ffb5-f55b-4a1d-92da-c47c58b0d9fb",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: answer<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b372a848-f162-40b3-96f4-8f3741a1d6cc",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: checkoutCode<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "e5402fad-8e0e-48dc-ace8-88055a68fbe8",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: code<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "cd407886-4fcd-4dbd-a485-cb699d0af9ce",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: answer_user<br/><pre>Field name: answer_pwd<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "ade6e26d-8bdd-43b5-9232-9242cc96a520",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "4f1ec232-8190-400d-a147-06b6c338fb9f",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: answer_pwd1<br/><pre>Field name: answer_pwd2<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "f9052ad9-9ea8-4ad5-b931-63526e1062ee",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "3eaa78e8-b590-4ece-a4e0-1036e2f7cdd8",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b0e427b5-4d7d-4c53-8519-eb9318bb9154",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: secretFileName<br/><pre>Field name: secretText<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "2bdf36d4-f1fb-49fa-a2d8-ccb1bf85345a",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: modulus<br/><pre>Field name: signature<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "56a2ae5f-696d-4f43-901a-a4a17372a118",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "36c217c2-839f-4acc-8c6f-be225eb4b556",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: answer_pwd1<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "9636d2eb-7ee7-4040-a77b-e583436ac985",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "623bda49-9a0b-44ee-9f23-70a5c83d186e",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation (Output Encoding):</b><br/><pre>try<br/></pre></p></br><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "d6b23de6-4c45-490c-89dd-61bd6e1095df",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: flag<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "7133f5fe-ae0a-4a02-b5c6-1bd1fac3f112",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "4a096b32-b353-47c7-926e-1992c05ceaca",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "2b97a409-e632-40c4-b3ef-aed6e8feceee",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "01721098-2901-4c7a-9d1f-77d7664406fb",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: token<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "a9e6ad21-6519-47b2-9749-90825526f729",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "7f74e6c8-8f65-4c7c-9e17-5f91ea4fa925",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: QTY<br/><pre>Field name: Total<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "f3ba1974-56d2-4640-84f5-9b27a9ae530d",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: person<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "18c4e0a5-f507-4289-8fca-c96fd9d7e826",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: answer<br/><pre>Field name: magic_answer<br/><pre>Field name: magic_num<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "9cae6ed0-4fef-4f29-a416-c02a1ba59405",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "20872d75-bd3b-40bf-9353-d23a3bc276a3",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: attributes<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "3e943738-b5d1-4bcd-9f83-3ce2b3a0b40f",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: userId<br/><pre>Field name: org.owasp.webgoat.lessons.idor.UserProfile.userId<br/><pre>Field name: org.owasp.webgoat.lessons.idor.UserProfile.name<br/>Validation regex: \"^[a-zA-Z\\s]+$\"<br/>Validation length: MIN: 2 MAX: 50<br/>Example: The regular expression \"^[a-zA-Z\\s]$\" requires a single character that is either a letter (uppercase or lowercase) or a whitespace. \n\nSo, a value that would satisfy this could be \"A\".<br/><pre>Field name: org.owasp.webgoat.lessons.idor.UserProfile.color<br/><pre>Field name: org.owasp.webgoat.lessons.idor.UserProfile.size<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "e2c4bfb1-9019-463a-a878-f9957fa29a95",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: username<br/>Validation regex: \"^[a-zA-Z0-9._-]{3,}$\"<br/>Validation length: MIN: 3 MAX: 30<br/>Example: \"John_Doe123\"<br/><pre>Field name: password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "2395ae93-2a33-4084-938f-77cfe10af213",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: userId<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "77ba2a24-d366-40f1-a432-971d53d54b9f",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: url<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "5f3fcd75-4b6f-41e2-8f2b-5f4a88f46911",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: username<br/>Validation regex: \"^[a-zA-Z0-9._-]{3,}$\"<br/>Validation length: MIN: 3 MAX: 30<br/>Example: \"John_Doe123\"<br/><pre>Field name: password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "1c0b2f64-c833-498e-ad19-5f7aeb0fe7eb",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: user<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "8cc405ea-d2d9-4b8f-9ab2-61f93663a6f7",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "c34213ae-58ed-4931-98b2-a794f148a04c",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "d2e4b4b3-31e3-46c4-ae4d-835ef61eee93",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "8832f14e-7c7b-4f5a-babd-9c80ba4228df",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "3b7a28d3-4a61-4422-acc3-f7e243a1d91f",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: token<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b9b69988-336e-4e58-861e-d12df6fc7302",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "593ee215-d962-4384-9778-1c7bdfb2a3a5",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: user<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "1112653f-c2b4-4408-a6a8-292974a4cae6",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "0c7e7f14-d0a5-4fa9-bfb5-2e43d3768b73",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "cd61210e-2e45-40de-82f6-79ebd8ac115f",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: user<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "3be38270-6e37-40d4-9f1d-1dc8caef3d35",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: token<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "a8a84231-8ac4-4b9b-b637-749170e140ad",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: user<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "d6b4425f-a6f2-4346-8d1b-665061114eab",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: token<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "59ee0215-f385-49c6-861b-e904e54b53f4",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: param1<br/><pre>Field name: param2<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "3a3aa1e5-4143-4be4-afba-ad55a1ed3d06",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: user<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "a58e93dd-8dfa-4b53-a9c9-dde08bd56ed5",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: username<br/>Validation regex: \"^[a-zA-Z0-9._-]{3,}$\"<br/>Validation length: MIN: 3 MAX: 30<br/>Example: \"John_Doe123\"<br/><pre>Field name: password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b92fab17-c9e3-477d-9e16-9a1b40f7d4f4",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: username<br/>Validation regex: \"^[a-zA-Z0-9._-]{3,}$\"<br/>Validation length: MIN: 3 MAX: 30<br/>Example: \"John_Doe123\"<br/><pre>Field name: password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "79f1afbc-cc59-4073-a598-3f086fea3ac1",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "f9cc5cce-17a4-4916-a5f8-2d71fceced56",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: org.owasp.webgoat.lessons.missingac.User.username<br/>Validation regex: \"^[a-zA-Z0-9._-]{3,}$\"<br/>Validation length: MIN: 3 MAX: 30<br/>Example: \"John_Doe123\"<br/><pre>Field name: org.owasp.webgoat.lessons.missingac.User.password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "fe3088fa-26b1-49d5-b8e8-3462e4d4e7d1",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "407143f9-85ac-4dcd-b067-6de16c5a7b29",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "ccab5141-21d3-4293-8f9e-d277eae105d8",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "2e935815-3d26-463a-bfc3-986c5be8f093",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "847d3913-3739-49d7-97e2-aa219743412a",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/><pre>Field name: email<br/>Validation regex: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z](2, 6)$\"<br/>Validation length: MIN: 6 MAX: 254<br/>Example: \"john_doe@example.com\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "e6b500f0-b7bf-493c-a225-df1180fba484",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: link<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "f089244d-4576-4cdf-991d-25e18c2bb728",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: email<br/>Validation regex: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z](2, 6)$\"<br/>Validation length: MIN: 6 MAX: 254<br/>Example: \"john_doe@example.com\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "01ceceb5-6646-44ae-8dff-eea74ae140cd",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: question<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "c8f5055a-ce26-4778-8fba-320e93117795",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: email<br/>Validation regex: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z](2, 6)$\"<br/>Validation length: MIN: 6 MAX: 254<br/>Example: \"john_doe@example.com\"<br/><pre>Field name: password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "42a83f29-7e6f-44c3-981c-19320783a1bb",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: emailReset<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "387d3e9d-e8ff-4b8f-9869-9af0e9d06b13",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: fullName<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b808df59-7839-40ad-ae5b-6032aa85f06a",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: fullName<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "7745bdb1-9bf1-4cab-8ec0-e7f84347567f",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b61111c4-d258-446a-8c27-cc8b8b15c3c7",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: secret<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b82ebf20-ed9e-44c5-b104-ee527d451848",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "a4e23706-26fe-4391-a9c7-0a0a2b50369a",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "5e23fe98-2452-46d9-b1e8-55fdacbccfcf",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: password<br/>Validation regex: \"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).{8,}$\"<br/>Validation length: MIN: 8 MAX: 128<br/>Example: \"Password123@\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "352267a4-7a7b-4e2c-9877-70c000256537",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "c74909c5-894c-444c-8e6c-49e177bcb519",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "5c816b78-998f-4573-bc0e-8b0d3956c490",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: username_reg<br/><pre>Field name: email_reg<br/><pre>Field name: password_reg<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "2a5613c2-207f-47c9-a4ac-c592700f3616",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: username_login<br/><pre>Field name: password_login<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "80552509-fa40-4e6f-a099-28209dc65d78",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: userId<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b729458e-63a9-4381-b0b7-d9640e643428",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: userid_6b<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "c16236a7-54a5-432e-880c-54562ca47d52",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "605195fe-c49f-42e3-b055-9ba2dca3fff0",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: action_string<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "e4518f8c-88e9-4c44-a954-9e077e265f0e",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: query<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "2ac16857-46b8-40e7-a8af-ce8583f795a2",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: query<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "84d1fe17-3934-4df4-99cb-08656b9e69b7",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: query<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b96e9a32-86f8-4aa5-85dd-eccf4f6ad2d6",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "2024bcc8-5446-471c-b98e-ec539a8a98c9",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: account<br/><pre>Field name: operator<br/><pre>Field name: injection<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "23dcde2f-cb84-462b-9488-fd39330ed248",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: userid<br/><pre>Field name: login_count<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "729be185-598f-45bd-8fdd-b9ec04af6614",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: name<br/>Validation regex: \"^[a-zA-Z\\s]+$\"<br/>Validation length: MIN: 2 MAX: 50<br/>Example: The regular expression \"^[a-zA-Z\\s]$\" requires a single character that is either a letter (uppercase or lowercase) or a whitespace. \n\nSo, a value that would satisfy this could be \"A\".<br/><pre>Field name: auth_tan<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b9d827f0-35a4-4b91-9c02-19b5575e7f8f",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: name<br/>Validation regex: \"^[a-zA-Z\\s]+$\"<br/>Validation length: MIN: 2 MAX: 50<br/>Example: The regular expression \"^[a-zA-Z\\s]$\" requires a single character that is either a letter (uppercase or lowercase) or a whitespace. \n\nSo, a value that would satisfy this could be \"A\".<br/><pre>Field name: auth_tan<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "e5f8f90d-7168-48a0-909c-3a7b7e533117",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: column<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "15743701-e08a-46cd-aa4c-a663b76458ee",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: field1<br/><pre>Field name: field2<br/><pre>Field name: field3<br/><pre>Field name: field4<br/><pre>Field name: field5<br/><pre>Field name: field6<br/><pre>Field name: field7<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "3cbfe504-a2d6-4150-a1f6-2afb4c8d64d6",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: editor<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "13464140-08b6-47a5-b734-ab695bc78dca",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: ip<br/>Validation regex: \"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"<br/>Validation length: MIN: 7 MAX: 15<br/>Example: This regular expression is used to validate IP addresses. An example of a value that would satisfy this regular expression is \"192.168.1.1\".<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "bf53c43e-f4d7-4489-863e-3da2c8774bfb",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: userId<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "ba26ee80-8fee-4f55-bf69-54bd2696bebe",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: userId<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "3bd5648c-4939-4b50-b596-d5f9ea5297fc",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: url<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "7a05ab4c-83e8-4d91-a6bf-2a5f3dff8e90",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: url<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "bc45a5bd-90c9-4766-a34b-00ff77c5fdad",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: payload<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "24870f94-dd93-4eda-9edf-728c5eb0a377",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "4e075b93-f380-4d9c-982e-64fa0456d31b",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "f06f03ab-e285-46d0-8c82-78bc538b80f4",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: uniqueCode<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "4d948750-24f5-4377-bfcb-b1f4194dc899",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: email<br/>Validation regex: \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z](2, 6)$\"<br/>Validation length: MIN: 6 MAX: 254<br/>Example: \"john_doe@example.com\"<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "90adfb97-81a4-48fe-88ce-130c95694f44",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: checkboxValue<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "df6dbe4d-4f34-44dd-842a-54d034779d35",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: editor<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b888704c-784d-4c0d-b761-887ffe4f476a",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: editor2<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "ff294e29-6e69-419b-a96b-d85bc508556c",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: field1<br/><pre>Field name: field2<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "83deda55-83a7-44b4-832c-2f8a71e74f97",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: DOMTestRoute<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "37d29eea-5638-4c18-ba1e-1c9fb6cb1adb",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "de6f57b1-1875-46e7-b415-cafeeaacd360",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "9a6f7099-c1f2-4b95-bbb2-6c92920e8243",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: successMessage<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b398e22c-1a2a-4c9d-b55e-abfb9046df95",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: successMessage<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "dbc1deb5-3881-424f-b7f2-7e49925c7b01",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation (Output Encoding):</b><br/><pre>Comment comment = parseJson(org.owasp.encoder.Encode.forJava(commentStr))<br/></pre></p></br><p><b>In Context Remediation:</b><br/><pre>Field name: org.owasp.webgoat.lessons.xss.Comment.user<br/><pre>Field name: org.owasp.webgoat.lessons.xss.Comment.dateTime<br/><pre>Field name: org.owasp.webgoat.lessons.xss.Comment.text<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "090a7c0f-b64a-4f72-a947-667f0075af8c",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation (Output Encoding):</b><br/><pre>if (org.owasp.encoder.Encode.forJava(commentStr).contains(fileContentsForUser))<br/>try<br/></pre></p></br><p><b>In Context Remediation:</b><br/><pre>Field name: org.owasp.webgoat.lessons.xxe.Comment.user<br/><pre>Field name: org.owasp.webgoat.lessons.xxe.Comment.dateTime<br/><pre>Field name: org.owasp.webgoat.lessons.xxe.Comment.text<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "07982e80-2344-4705-abc3-eef2c59c1f43",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation (Output Encoding):</b><br/><pre>if (APPLICATION_JSON_VALUE.equals(contentType))<br/>if (null != contentType && contentType.contains(MediaType.APPLICATION_XML_VALUE))<br/></pre></p></br><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "5e6e4142-a96d-42ac-a293-d8a70883673d",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "697f2221-ce6b-4d9f-9b02-dbfc3fc415f9",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation (Output Encoding):</b><br/><pre>try<br/></pre></p></br><p><b>In Context Remediation:</b><br/><pre>Field name: org.owasp.webgoat.lessons.xxe.Comment.user<br/><pre>Field name: org.owasp.webgoat.lessons.xxe.Comment.dateTime<br/><pre>Field name: org.owasp.webgoat.lessons.xxe.Comment.text<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "cdc3977c-7518-4fa8-8c79-bb4c835efe26",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "1efd070d-5ae8-4b97-b80a-77171bd1beb8",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "324698b2-3989-4edc-b984-acb4e120c215",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "2d7185b0-dc22-4af4-9852-fe7d61a38b19",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "c85976b8-db54-4270-adfb-a35157d23d37",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "55eccc5d-9d78-4fba-b4c7-2909e0f900d3",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "b54d789b-0f6c-4b78-9253-65ac4f0df351",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>In Context Remediation:</b><br/><pre>Field name: org.owasp.webgoat.webwolf.mailbox.Email.contents<br/><pre>Field name: org.owasp.webgoat.webwolf.mailbox.Email.sender<br/><pre>Field name: org.owasp.webgoat.webwolf.mailbox.Email.title<br/><pre>Field name: org.owasp.webgoat.webwolf.mailbox.Email.recipient<br/></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "a0fe091a-f5bf-4c5b-a0f9-6a261cbf6bfc",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            },
            {
              "id": "044fe496-96b4-482c-9a5f-cb3f1db288c0",
              "help": {
                "text": "",
                "markdown": "<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely. This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p><p>Perform input validation to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components. Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.</p><p>Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</p><p><b>Solution (Bean Validation):</b><br/><pre>public class ExampleDto implements Serializable {<br/>    @Pattern(regexp = \"white list regular expression\")<br/>    @Size(min = minimum field size, max = maximum field size)<br/>    private String fieldName;<br/>}</pre></p><br/><p><b>Solution (Validation Service or Method):</b><br/><pre>public boolean validateData(string data, String whiteListRegex) {<br/>    Pattern p = Pattern.compile(whiteListRegex);<br/>    Matcher m = p.matcher(data);<br/>    return m.matches();<br/>}</pre></p><br/><p><b>References</b><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\">OWASP: REST Security Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\">OWASP: Input Validation Cheat Sheet</a><br/><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Bean_Validation_Cheat_Sheet.html\">OWASP: Bean Validation Cheat Sheet</a><br/></p>"
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "884e780e-690f-4d81-91ad-dfcf22d794e8",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.container.controller.StartLesson"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/container/controller/StartLesson.java"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 88
                }
              },
              "logicalLocations": [
                {
                  "name": "lessonPage(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.container.controller.StartLesson.lessonPage(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "fbe19599-1020-4833-aa7d-b309e77eeaa3",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.container.controller.Welcome"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/container/controller/Welcome.java"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 69
                }
              },
              "logicalLocations": [
                {
                  "name": "welcome(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.container.controller.Welcome.welcome(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "775b78fa-93a1-4951-93d8-ff02f33557c9",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.container.service.LessonMenuService"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/container/service/LessonMenuService.java"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 108
                }
              },
              "logicalLocations": [
                {
                  "name": "showLeftNav()",
                  "fullyQualifiedName": "org.owasp.webgoat.container.service.LessonMenuService.showLeftNav()",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "25fbe361-b8b9-4fb5-93c0-ac74169e0eea",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.container.users.RegistrationController"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/container/users/RegistrationController.java"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 47
                }
              },
              "logicalLocations": [
                {
                  "name": "registration(UserForm, BindingResult, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.container.users.RegistrationController.registration(UserForm, BindingResult, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "8931d673-0399-45df-be7c-de3b662ce6cb",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.container.users.RegistrationController"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/container/users/RegistrationController.java"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 55
                }
              },
              "logicalLocations": [
                {
                  "name": "registrationOAUTH(Authentication, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.container.users.RegistrationController.registrationOAUTH(Authentication, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "356d3053-1b86-4dfb-bab9-5952fb99d546",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.container.users.RegistrationController"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/container/users/RegistrationController.java"
                },
                "region": {
                  "startLine": 30
                }
              },
              "logicalLocations": [
                {
                  "name": "showForm(UserForm)",
                  "fullyQualifiedName": "org.owasp.webgoat.container.users.RegistrationController.showForm(UserForm)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "eac8191d-37de-43ef-9e5e-a817fda6badf",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.container.users.Scoreboard"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/container/users/Scoreboard.java"
                },
                "region": {
                  "startLine": 38
                }
              },
              "logicalLocations": [
                {
                  "name": "getRankings()",
                  "fullyQualifiedName": "org.owasp.webgoat.container.users.Scoreboard.getRankings()",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "3c159d4e-8b85-4945-8e51-6b83006c8772",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.authbypass.VerifyAccount"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/authbypass/VerifyAccount.java"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 78
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.authbypass.VerifyAccount.completed(String, String, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "0822318d-ae95-4628-b5f2-63ebb4f337be",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.bypassrestrictions.BypassRestrictionsFieldRestrictions"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/bypassrestrictions/BypassRestrictionsFieldRestrictions.java"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 58
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String, String, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.bypassrestrictions.BypassRestrictionsFieldRestrictions.completed(String, String, String, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "9f8355be-58c7-4a85-831e-e21fa1005a99",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.bypassrestrictions.BypassRestrictionsFrontendValidation"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/bypassrestrictions/BypassRestrictionsFrontendValidation.java"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 77
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String, String, String, String, String, String, Integer)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.bypassrestrictions.BypassRestrictionsFrontendValidation.completed(String, String, String, String, String, String, String, Integer)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "43fa613f-7fcb-4f62-97a7-c3e98fb7830c",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.challenges.FlagController"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/challenges/FlagController.java"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 49
                }
              },
              "logicalLocations": [
                {
                  "name": "postFlag(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.challenges.FlagController.postFlag(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b2b44d7c-34e1-474e-b1cd-d70482000d28",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.challenges.challenge1.Assignment1"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/challenges/challenge1/Assignment1.java"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 64
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.challenges.challenge1.Assignment1.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "7aea8f04-ea2a-47e4-9e73-b107ebc0bd8a",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.challenges.challenge5.Assignment5"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/challenges/challenge5/Assignment5.java"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 57
                }
              },
              "logicalLocations": [
                {
                  "name": "login(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.challenges.challenge5.Assignment5.login(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "a61aaafd-0d01-469f-b0f0-2651283d5812",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.challenges.challenge7.Assignment7"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/challenges/challenge7/Assignment7.java"
                },
                "region": {
                  "startLine": 60,
                  "endLine": 68
                }
              },
              "logicalLocations": [
                {
                  "name": "resetPassword(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.challenges.challenge7.Assignment7.resetPassword(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b9723dde-20f0-4e6c-82c4-602de985ed83",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.challenges.challenge7.Assignment7"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/challenges/challenge7/Assignment7.java"
                },
                "region": {
                  "startLine": 76,
                  "endLine": 95
                }
              },
              "logicalLocations": [
                {
                  "name": "sendPasswordResetLink(String, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.challenges.challenge7.Assignment7.sendPasswordResetLink(String, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "f5053a2f-7550-42de-a6cf-d8249cb8ab28",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.challenges.challenge8.Assignment8"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/challenges/challenge8/Assignment8.java"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 49
                }
              },
              "logicalLocations": [
                {
                  "name": "vote(int, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.challenges.challenge8.Assignment8.vote(int, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "f9dad078-04ef-4d1b-9d19-b1c321240e01",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.chromedevtools.NetworkDummy"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/chromedevtools/NetworkDummy.java"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 51
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.chromedevtools.NetworkDummy.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "1dc38dee-bd9f-4a05-ba1c-a605c8fbdbc6",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.chromedevtools.NetworkLesson"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/chromedevtools/NetworkLesson.java"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 53
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.chromedevtools.NetworkLesson.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "16ab2d68-b928-435b-95a5-d3a3883ded00",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.chromedevtools.NetworkLesson"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/chromedevtools/NetworkLesson.java"
                },
                "region": {
                  "startLine": 60
                }
              },
              "logicalLocations": [
                {
                  "name": "ok(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.chromedevtools.NetworkLesson.ok(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "86c6d30d-3013-4eb1-8557-fd2e1a64ddd0",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cia.CIAQuiz"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cia/CIAQuiz.java"
                },
                "region": {
                  "startLine": 24,
                  "endLine": 44
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String[], String[], String[], String[])",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cia.CIAQuiz.completed(String[], String[], String[], String[])",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "23d8ffb5-f55b-4a1d-92da-c47c58b0d9fb",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.clientsidefiltering.ClientSideFilteringAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/clientsidefiltering/ClientSideFilteringAssignment.java"
                },
                "region": {
                  "startLine": 45
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.clientsidefiltering.ClientSideFilteringAssignment.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b372a848-f162-40b3-96f4-8f3741a1d6cc",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.clientsidefiltering.ClientSideFilteringFreeAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/clientsidefiltering/ClientSideFilteringFreeAssignment.java"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 53
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.clientsidefiltering.ClientSideFilteringFreeAssignment.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "e5402fad-8e0e-48dc-ace8-88055a68fbe8",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.clientsidefiltering.ShopEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/clientsidefiltering/ShopEndpoint.java"
                },
                "region": {
                  "startLine": 73,
                  "endLine": 76
                }
              },
              "logicalLocations": [
                {
                  "name": "getDiscountCode(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.clientsidefiltering.ShopEndpoint.getDiscountCode(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "cd407886-4fcd-4dbd-a485-cb699d0af9ce",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.EncodingAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/EncodingAssignment.java"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 72
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(HttpServletRequest, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.EncodingAssignment.completed(HttpServletRequest, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ade6e26d-8bdd-43b5-9232-9242cc96a520",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.EncodingAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/EncodingAssignment.java"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 56
                }
              },
              "logicalLocations": [
                {
                  "name": "getBasicAuth(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.EncodingAssignment.getBasicAuth(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "4f1ec232-8190-400d-a147-06b6c338fb9f",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.HashingAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 96
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(HttpServletRequest, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.HashingAssignment.completed(HttpServletRequest, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "f9052ad9-9ea8-4ad5-b931-63526e1062ee",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.HashingAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 62
                }
              },
              "logicalLocations": [
                {
                  "name": "getMd5(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.HashingAssignment.getMd5(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "3eaa78e8-b590-4ece-a4e0-1036e2f7cdd8",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.HashingAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 76
                }
              },
              "logicalLocations": [
                {
                  "name": "getSha256(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.HashingAssignment.getSha256(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b0e427b5-4d7d-4c53-8519-eb9318bb9154",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.SecureDefaultsAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/SecureDefaultsAssignment.java"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 57
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.SecureDefaultsAssignment.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "2bdf36d4-f1fb-49fa-a2d8-ccb1bf85345a",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.SigningAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/SigningAssignment.java"
                },
                "region": {
                  "startLine": 72,
                  "endLine": 89
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(HttpServletRequest, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.SigningAssignment.completed(HttpServletRequest, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "56a2ae5f-696d-4f43-901a-a4a17372a118",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.SigningAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/SigningAssignment.java"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 64
                }
              },
              "logicalLocations": [
                {
                  "name": "getPrivateKey(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.SigningAssignment.getPrivateKey(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "36c217c2-839f-4acc-8c6f-be225eb4b556",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.cryptography.XOREncodingAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/cryptography/XOREncodingAssignment.java"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 43
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.cryptography.XOREncodingAssignment.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "9636d2eb-7ee7-4040-a77b-e583436ac985",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.csrf.CSRFConfirmFlag1"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/csrf/CSRFConfirmFlag1.java"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 54
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.csrf.CSRFConfirmFlag1.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "623bda49-9a0b-44ee-9f23-70a5c83d186e",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.csrf.CSRFFeedback"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/csrf/CSRFFeedback.java"
                },
                "region": {
                  "startLine": 62,
                  "endLine": 81
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(HttpServletRequest, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.csrf.CSRFFeedback.completed(HttpServletRequest, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "d6b23de6-4c45-490c-89dd-61bd6e1095df",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.csrf.CSRFFeedback"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/csrf/CSRFFeedback.java"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 90
                }
              },
              "logicalLocations": [
                {
                  "name": "flag(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.csrf.CSRFFeedback.flag(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "7133f5fe-ae0a-4a02-b5c6-1bd1fac3f112",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.csrf.CSRFGetFlag"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/csrf/CSRFGetFlag.java"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 81
                }
              },
              "logicalLocations": [
                {
                  "name": "invoke(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.csrf.CSRFGetFlag.invoke(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "4a096b32-b353-47c7-926e-1992c05ceaca",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.csrf.CSRFLogin"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/csrf/CSRFLogin.java"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 59
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.csrf.CSRFLogin.completed(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "2b97a409-e632-40c4-b3ef-aed6e8feceee",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.csrf.ForgedReviews"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/csrf/ForgedReviews.java"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 113
                }
              },
              "logicalLocations": [
                {
                  "name": "createNewReview(String, Integer, String, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.csrf.ForgedReviews.createNewReview(String, Integer, String, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "01721098-2901-4c7a-9d1f-77d7664406fb",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.deserialization.InsecureDeserializationTask"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/deserialization/InsecureDeserializationTask.java"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 83
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.deserialization.InsecureDeserializationTask.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "a9e6ad21-6519-47b2-9749-90825526f729",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.hijacksession.HijackSessionAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/hijacksession/HijackSessionAssignment.java"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 82
                }
              },
              "logicalLocations": [
                {
                  "name": "login(String, String, String, HttpServletResponse)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.hijacksession.HijackSessionAssignment.login(String, String, String, HttpServletResponse)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "7f74e6c8-8f65-4c7c-9e17-5f91ea4fa925",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.htmltampering.HtmlTamperingTask"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/htmltampering/HtmlTamperingTask.java"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 43
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.htmltampering.HtmlTamperingTask.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "f3ba1974-56d2-4640-84f5-9b27a9ae530d",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.httpbasics.HttpBasicsLesson"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/httpbasics/HttpBasicsLesson.java"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 46
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.httpbasics.HttpBasicsLesson.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "18c4e0a5-f507-4289-8fca-c96fd9d7e826",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.httpbasics.HttpBasicsQuiz"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/httpbasics/HttpBasicsQuiz.java"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 55
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.httpbasics.HttpBasicsQuiz.completed(String, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "9cae6ed0-4fef-4f29-a416-c02a1ba59405",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.httpproxies.HttpBasicsInterceptRequest"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/httpproxies/HttpBasicsInterceptRequest.java"
                },
                "region": {
                  "startLine": 47,
                  "endLine": 56
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(Boolean, String, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.httpproxies.HttpBasicsInterceptRequest.completed(Boolean, String, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "20872d75-bd3b-40bf-9353-d23a3bc276a3",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.idor.IDORDiffAttributes"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/idor/IDORDiffAttributes.java"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 56
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.idor.IDORDiffAttributes.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "3e943738-b5d1-4bcd-9f83-3ce2b3a0b40f",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.idor.IDOREditOtherProfile"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/idor/IDOREditOtherProfile.java"
                },
                "region": {
                  "startLine": 58,
                  "endLine": 112
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, UserProfile)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.idor.IDOREditOtherProfile.completed(String, UserProfile)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "e2c4bfb1-9019-463a-a878-f9957fa29a95",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.idor.IDORLogin"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/idor/IDORLogin.java"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 74
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.idor.IDORLogin.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "2395ae93-2a33-4084-938f-77cfe10af213",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.idor.IDORViewOtherProfile"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/idor/IDORViewOtherProfile.java"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 81
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, HttpServletResponse)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.idor.IDORViewOtherProfile.completed(String, HttpServletResponse)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "77ba2a24-d366-40f1-a432-971d53d54b9f",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.idor.IDORViewOwnProfileAltUrl"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/idor/IDORViewOwnProfileAltUrl.java"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 72
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.idor.IDORViewOwnProfileAltUrl.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "5f3fcd75-4b6f-41e2-8f2b-5f4a88f46911",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.insecurelogin.InsecureLoginTask"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/insecurelogin/InsecureLoginTask.java"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.insecurelogin.InsecureLoginTask.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "1c0b2f64-c833-498e-ad19-5f7aeb0fe7eb",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTDecodeEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTDecodeEndpoint.java"
                },
                "region": {
                  "startLine": 16,
                  "endLine": 19
                }
              },
              "logicalLocations": [
                {
                  "name": "decode(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTDecodeEndpoint.decode(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "8cc405ea-d2d9-4b8f-9ab2-61f93663a6f7",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTQuiz"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTQuiz.java"
                },
                "region": {
                  "startLine": 21,
                  "endLine": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String[], String[])",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTQuiz.completed(String[], String[])",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "c34213ae-58ed-4931-98b2-a794f148a04c",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTRefreshEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTRefreshEndpoint.java"
                },
                "region": {
                  "startLine": 103,
                  "endLine": 120
                }
              },
              "logicalLocations": [
                {
                  "name": "checkout(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTRefreshEndpoint.checkout(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "d2e4b4b3-31e3-46c4-ae4d-835ef61eee93",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTRefreshEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTRefreshEndpoint.java"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 80
                }
              },
              "logicalLocations": [
                {
                  "name": "follow(Map)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTRefreshEndpoint.follow(Map)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "8832f14e-7c7b-4f5a-babd-9c80ba4228df",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTRefreshEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTRefreshEndpoint.java"
                },
                "region": {
                  "startLine": 129,
                  "endLine": 151
                }
              },
              "logicalLocations": [
                {
                  "name": "newToken(String, Map)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTRefreshEndpoint.newToken(String, Map)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "3b7a28d3-4a61-4422-acc3-f7e243a1d91f",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTSecretKeyEndpoint.java"
                },
                "region": {
                  "startLine": 78,
                  "endLine": 92
                }
              },
              "logicalLocations": [
                {
                  "name": "login(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTSecretKeyEndpoint.login(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b9b69988-336e-4e58-861e-d12df6fc7302",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java"
                },
                "region": {
                  "startLine": 146,
                  "endLine": 167
                }
              },
              "logicalLocations": [
                {
                  "name": "getVotes(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint.getVotes(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "593ee215-d962-4384-9778-1c7bdfb2a3a5",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java"
                },
                "region": {
                  "startLine": 121,
                  "endLine": 140
                }
              },
              "logicalLocations": [
                {
                  "name": "login(String, HttpServletResponse)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint.login(String, HttpServletResponse)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "1112653f-c2b4-4408-a6a8-292974a4cae6",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java"
                },
                "region": {
                  "startLine": 199,
                  "endLine": 213
                }
              },
              "logicalLocations": [
                {
                  "name": "resetVotes(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint.resetVotes(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "0c7e7f14-d0a5-4fa9-bfb5-2e43d3768b73",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java"
                },
                "region": {
                  "startLine": 176,
                  "endLine": 190
                }
              },
              "logicalLocations": [
                {
                  "name": "vote(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint.vote(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "cd61210e-2e45-40de-82f6-79ebd8ac115f",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.claimmisuse.JWTHeaderJKUEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/claimmisuse/JWTHeaderJKUEndpoint.java"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "follow(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.claimmisuse.JWTHeaderJKUEndpoint.follow(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "3be38270-6e37-40d4-9f1d-1dc8caef3d35",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.claimmisuse.JWTHeaderJKUEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/claimmisuse/JWTHeaderJKUEndpoint.java"
                },
                "region": {
                  "startLine": 45,
                  "endLine": 66
                }
              },
              "logicalLocations": [
                {
                  "name": "resetVotes(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.claimmisuse.JWTHeaderJKUEndpoint.resetVotes(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "a8a84231-8ac4-4b9b-b637-749170e140ad",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.claimmisuse.JWTHeaderKIDEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/claimmisuse/JWTHeaderKIDEndpoint.java"
                },
                "region": {
                  "startLine": 66,
                  "endLine": 69
                }
              },
              "logicalLocations": [
                {
                  "name": "follow(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.claimmisuse.JWTHeaderKIDEndpoint.follow(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "d6b4425f-a6f2-4346-8d1b-665061114eab",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.jwt.claimmisuse.JWTHeaderKIDEndpoint"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/jwt/claimmisuse/JWTHeaderKIDEndpoint.java"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 117
                }
              },
              "logicalLocations": [
                {
                  "name": "resetVotes(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.jwt.claimmisuse.JWTHeaderKIDEndpoint.resetVotes(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "59ee0215-f385-49c6-861b-e904e54b53f4",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.lessontemplate.SampleAttack"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/lessontemplate/SampleAttack.java"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 70
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.lessontemplate.SampleAttack.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "3a3aa1e5-4143-4be4-afba-ad55a1ed3d06",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.lessontemplate.SampleAttack"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/lessontemplate/SampleAttack.java"
                },
                "region": {
                  "startLine": 81
                }
              },
              "logicalLocations": [
                {
                  "name": "getItemsInBasket(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.lessontemplate.SampleAttack.getItemsInBasket(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "a58e93dd-8dfa-4b53-a9c9-dde08bd56ed5",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.logging.LogBleedingTask"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/logging/LogBleedingTask.java"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 64
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.logging.LogBleedingTask.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b92fab17-c9e3-477d-9e16-9a1b40f7d4f4",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.logging.LogSpoofingTask"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/logging/LogSpoofingTask.java"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 49
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.logging.LogSpoofingTask.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "79f1afbc-cc59-4073-a598-3f086fea3ac1",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.missingac.MissingFunctionACHiddenMenus"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/missingac/MissingFunctionACHiddenMenus.java"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 54
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.missingac.MissingFunctionACHiddenMenus.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "f9cc5cce-17a4-4916-a5f8-2d71fceced56",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.missingac.MissingFunctionACUsers"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/missingac/MissingFunctionACUsers.java"
                },
                "region": {
                  "startLine": 102,
                  "endLine": 106
                }
              },
              "logicalLocations": [
                {
                  "name": "addUser(User)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.missingac.MissingFunctionACUsers.addUser(User)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "fe3088fa-26b1-49d5-b8e8-3462e4d4e7d1",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.missingac.MissingFunctionACYourHash"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/missingac/MissingFunctionACYourHash.java"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 58
                }
              },
              "logicalLocations": [
                {
                  "name": "simple(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.missingac.MissingFunctionACYourHash.simple(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "407143f9-85ac-4dcd-b067-6de16c5a7b29",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.missingac.MissingFunctionACYourHashAdmin"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/missingac/MissingFunctionACYourHashAdmin.java"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 66
                }
              },
              "logicalLocations": [
                {
                  "name": "admin(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.missingac.MissingFunctionACYourHashAdmin.admin(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ccab5141-21d3-4293-8f9e-d277eae105d8",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.passwordreset.QuestionsAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/passwordreset/QuestionsAssignment.java"
                },
                "region": {
                  "startLine": 57,
                  "endLine": 73
                }
              },
              "logicalLocations": [
                {
                  "name": "passwordReset(Map)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.passwordreset.QuestionsAssignment.passwordReset(Map)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "2e935815-3d26-463a-bfc3-986c5be8f093",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.passwordreset.ResetLinkAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/passwordreset/ResetLinkAssignment.java"
                },
                "region": {
                  "startLine": 116,
                  "endLine": 132
                }
              },
              "logicalLocations": [
                {
                  "name": "changePassword(PasswordChangeForm, BindingResult)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.passwordreset.ResetLinkAssignment.changePassword(PasswordChangeForm, BindingResult)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "847d3913-3739-49d7-97e2-aa219743412a",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.passwordreset.ResetLinkAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/passwordreset/ResetLinkAssignment.java"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 94
                }
              },
              "logicalLocations": [
                {
                  "name": "login(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.passwordreset.ResetLinkAssignment.login(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "e6b500f0-b7bf-493c-a225-df1180fba484",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.passwordreset.ResetLinkAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/passwordreset/ResetLinkAssignment.java"
                },
                "region": {
                  "startLine": 99,
                  "endLine": 110
                }
              },
              "logicalLocations": [
                {
                  "name": "resetPassword(String, Model)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.passwordreset.ResetLinkAssignment.resetPassword(String, Model)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "f089244d-4576-4cdf-991d-25e18c2bb728",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.passwordreset.ResetLinkAssignmentForgotPassword"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/passwordreset/ResetLinkAssignmentForgotPassword.java"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 87
                }
              },
              "logicalLocations": [
                {
                  "name": "sendPasswordResetLink(String, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.passwordreset.ResetLinkAssignmentForgotPassword.sendPasswordResetLink(String, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "01ceceb5-6646-44ae-8dff-eea74ae140cd",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.passwordreset.SecurityQuestionAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/passwordreset/SecurityQuestionAssignment.java"
                },
                "region": {
                  "startLine": 96,
                  "endLine": 103
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.passwordreset.SecurityQuestionAssignment.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "c8f5055a-ce26-4778-8fba-320e93117795",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.passwordreset.SimpleMailAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/passwordreset/SimpleMailAssignment.java"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 68
                }
              },
              "logicalLocations": [
                {
                  "name": "login(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.passwordreset.SimpleMailAssignment.login(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "42a83f29-7e6f-44c3-981c-19320783a1bb",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.passwordreset.SimpleMailAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/passwordreset/SimpleMailAssignment.java"
                },
                "region": {
                  "startLine": 77,
                  "endLine": 78
                }
              },
              "logicalLocations": [
                {
                  "name": "resetPassword(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.passwordreset.SimpleMailAssignment.resetPassword(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "387d3e9d-e8ff-4b8f-9869-9af0e9d06b13",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.pathtraversal.ProfileUpload"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUpload.java"
                },
                "region": {
                  "startLine": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "uploadFileHandler(MultipartFile, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.pathtraversal.ProfileUpload.uploadFileHandler(MultipartFile, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b808df59-7839-40ad-ae5b-6032aa85f06a",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.pathtraversal.ProfileUploadFix"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUploadFix.java"
                },
                "region": {
                  "startLine": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "uploadFileHandler(MultipartFile, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.pathtraversal.ProfileUploadFix.uploadFileHandler(MultipartFile, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "7745bdb1-9bf1-4cab-8ec0-e7f84347567f",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.pathtraversal.ProfileUploadRemoveUserInput"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUploadRemoveUserInput.java"
                },
                "region": {
                  "startLine": 36
                }
              },
              "logicalLocations": [
                {
                  "name": "uploadFileHandler(MultipartFile)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.pathtraversal.ProfileUploadRemoveUserInput.uploadFileHandler(MultipartFile)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b61111c4-d258-446a-8c27-cc8b8b15c3c7",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.pathtraversal.ProfileUploadRetrieval"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUploadRetrieval.java"
                },
                "region": {
                  "startLine": 75,
                  "endLine": 78
                }
              },
              "logicalLocations": [
                {
                  "name": "execute(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.pathtraversal.ProfileUploadRetrieval.execute(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b82ebf20-ed9e-44c5-b104-ee527d451848",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.pathtraversal.ProfileUploadRetrieval"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileUploadRetrieval.java"
                },
                "region": {
                  "startLine": 84,
                  "endLine": 114
                }
              },
              "logicalLocations": [
                {
                  "name": "getProfilePicture(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.pathtraversal.ProfileUploadRetrieval.getProfilePicture(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "a4e23706-26fe-4391-a9c7-0a0a2b50369a",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.pathtraversal.ProfileZipSlip"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/pathtraversal/ProfileZipSlip.java"
                },
                "region": {
                  "startLine": 52,
                  "endLine": 55
                }
              },
              "logicalLocations": [
                {
                  "name": "uploadFileHandler(MultipartFile)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.pathtraversal.ProfileZipSlip.uploadFileHandler(MultipartFile)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "5e23fe98-2452-46d9-b1e8-55fdacbccfcf",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.securepasswords.SecurePasswordsAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/securepasswords/SecurePasswordsAssignment.java"
                },
                "region": {
                  "startLine": 43,
                  "endLine": 91
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.securepasswords.SecurePasswordsAssignment.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "352267a4-7a7b-4e2c-9877-70c000256537",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.spoofcookie.SpoofCookieAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java"
                },
                "region": {
                  "startLine": 79,
                  "endLine": 82
                }
              },
              "logicalLocations": [
                {
                  "name": "cleanup(HttpServletResponse)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.spoofcookie.SpoofCookieAssignment.cleanup(HttpServletResponse)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "c74909c5-894c-444c-8e6c-49e177bcb519",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.spoofcookie.SpoofCookieAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java"
                },
                "region": {
                  "startLine": 70,
                  "endLine": 73
                }
              },
              "logicalLocations": [
                {
                  "name": "login(String, String, String, HttpServletResponse)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.spoofcookie.SpoofCookieAssignment.login(String, String, String, HttpServletResponse)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "5c816b78-998f-4573-bc0e-8b0d3956c490",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallenge"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 90
                }
              },
              "logicalLocations": [
                {
                  "name": "registerNewUser(String, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallenge.registerNewUser(String, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "2a5613c2-207f-47c9-a4ac-c592700f3616",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallengeLogin"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallengeLogin.java"
                },
                "region": {
                  "startLine": 54
                }
              },
              "logicalLocations": [
                {
                  "name": "login(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionChallengeLogin.login(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "80552509-fa40-4e6f-a099-28209dc65d78",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionLesson6a"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java"
                },
                "region": {
                  "startLine": 57
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionLesson6a.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b729458e-63a9-4381-b0b7-d9640e643428",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionLesson6b"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6b.java"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 53
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionLesson6b.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "c16236a7-54a5-432e-880c-54562ca47d52",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionQuiz"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionQuiz.java"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 78
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String[], String[], String[], String[], String[])",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.advanced.SqlInjectionQuiz.completed(String[], String[], String[], String[], String[])",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "605195fe-c49f-42e3-b055-9ba2dca3fff0",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson10"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java"
                },
                "region": {
                  "startLine": 59
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson10.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "e4518f8c-88e9-4c44-a954-9e077e265f0e",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson2"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java"
                },
                "region": {
                  "startLine": 59
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson2.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "2ac16857-46b8-40e7-a8af-ce8583f795a2",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson3"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java"
                },
                "region": {
                  "startLine": 54
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson3.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "84d1fe17-3934-4df4-99cb-08656b9e69b7",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson4"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson4.java"
                },
                "region": {
                  "startLine": 55
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson4.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b96e9a32-86f8-4aa5-85dd-eccf4f6ad2d6",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5.java"
                },
                "region": {
                  "startLine": 71,
                  "endLine": 72
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "2024bcc8-5446-471c-b98e-ec539a8a98c9",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5a"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java"
                },
                "region": {
                  "startLine": 56
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5a.completed(String, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "23dcde2f-cb84-462b-9488-fd39330ed248",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5b"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5b.java"
                },
                "region": {
                  "startLine": 58
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson5b.completed(String, String, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "729be185-598f-45bd-8fdd-b9ec04af6614",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson8"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java"
                },
                "region": {
                  "startLine": 60
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson8.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b9d827f0-35a4-4b91-9c02-19b5575e7f8f",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson9"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java"
                },
                "region": {
                  "startLine": 61
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.introduction.SqlInjectionLesson9.completed(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "e5f8f90d-7168-48a0-909c-3a7b7e533117",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.mitigation.Servers"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/Servers.java"
                },
                "region": {
                  "startLine": 68,
                  "endLine": 91
                }
              },
              "logicalLocations": [
                {
                  "name": "sort(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.mitigation.Servers.sort(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "15743701-e08a-46cd-aa4c-a663b76458ee",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10a"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlInjectionLesson10a.java"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 68
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String, String, String, String, String, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10a.completed(String, String, String, String, String, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "3cbfe504-a2d6-4150-a1f6-2afb4c8d64d6",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlInjectionLesson10b.java"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 101
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson10b.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "13464140-08b6-47a5-b734-ab695bc78dca",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson13"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlInjectionLesson13.java"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 71
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlInjectionLesson13.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "bf53c43e-f4d7-4489-863e-3da2c8774bfb",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlOnlyInputValidation"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlOnlyInputValidation.java"
                },
                "region": {
                  "startLine": 48,
                  "endLine": 52
                }
              },
              "logicalLocations": [
                {
                  "name": "attack(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlOnlyInputValidation.attack(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ba26ee80-8fee-4f55-bf69-54bd2696bebe",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlOnlyInputValidationOnKeywords"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/SqlOnlyInputValidationOnKeywords.java"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 58
                }
              },
              "logicalLocations": [
                {
                  "name": "attack(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.sqlinjection.mitigation.SqlOnlyInputValidationOnKeywords.attack(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "3bd5648c-4939-4b50-b596-d5f9ea5297fc",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.ssrf.SSRFTask1"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/ssrf/SSRFTask1.java"
                },
                "region": {
                  "startLine": 40
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.ssrf.SSRFTask1.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "7a05ab4c-83e8-4d91-a6bf-2a5f3dff8e90",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.ssrf.SSRFTask2"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/ssrf/SSRFTask2.java"
                },
                "region": {
                  "startLine": 45
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.ssrf.SSRFTask2.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "bc45a5bd-90c9-4766-a34b-00ff77c5fdad",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.vulnerablecomponents.VulnerableComponentsLesson"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/vulnerablecomponents/VulnerableComponentsLesson.java"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 73
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.vulnerablecomponents.VulnerableComponentsLesson.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "24870f94-dd93-4eda-9edf-728c5eb0a377",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.webwolfintroduction.LandingAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/webwolfintroduction/LandingAssignment.java"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 54
                }
              },
              "logicalLocations": [
                {
                  "name": "click(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.webwolfintroduction.LandingAssignment.click(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "4e075b93-f380-4d9c-982e-64fa0456d31b",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.webwolfintroduction.LandingAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/webwolfintroduction/LandingAssignment.java"
                },
                "region": {
                  "startLine": 59,
                  "endLine": 66
                }
              },
              "logicalLocations": [
                {
                  "name": "openPasswordReset(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.webwolfintroduction.LandingAssignment.openPasswordReset(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "f06f03ab-e285-46d0-8c82-78bc538b80f4",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.webwolfintroduction.MailAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/webwolfintroduction/MailAssignment.java"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 89
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.webwolfintroduction.MailAssignment.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "4d948750-24f5-4377-bfcb-b1f4194dc899",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.webwolfintroduction.MailAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/webwolfintroduction/MailAssignment.java"
                },
                "region": {
                  "startLine": 55,
                  "endLine": 76
                }
              },
              "logicalLocations": [
                {
                  "name": "sendEmail(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.webwolfintroduction.MailAssignment.sendEmail(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "90adfb97-81a4-48fe-88ce-130c95694f44",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson1"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/CrossSiteScriptingLesson1.java"
                },
                "region": {
                  "startLine": 39,
                  "endLine": 42
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson1.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "df6dbe4d-4f34-44dd-842a-54d034779d35",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson3"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/CrossSiteScriptingLesson3.java"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 84
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson3.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b888704c-784d-4c0d-b761-887ffe4f476a",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson4"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/CrossSiteScriptingLesson4.java"
                },
                "region": {
                  "startLine": 41,
                  "endLine": 53
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson4.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ff294e29-6e69-419b-a96b-d85bc508556c",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson5a"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/CrossSiteScriptingLesson5a.java"
                },
                "region": {
                  "startLine": 63,
                  "endLine": 100
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(Integer, Integer, Integer, Integer, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson5a.completed(Integer, Integer, Integer, Integer, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "83deda55-83a7-44b4-832c-2f8a71e74f97",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson6a"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/CrossSiteScriptingLesson6a.java"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 54
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.CrossSiteScriptingLesson6a.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "37d29eea-5638-4c18-ba1e-1c9fb6cb1adb",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.CrossSiteScriptingQuiz"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/CrossSiteScriptingQuiz.java"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 73
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String[], String[], String[], String[], String[])",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.CrossSiteScriptingQuiz.completed(String[], String[], String[], String[], String[])",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "de6f57b1-1875-46e7-b415-cafeeaacd360",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.DOMCrossSiteScripting"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/DOMCrossSiteScripting.java"
                },
                "region": {
                  "startLine": 42,
                  "endLine": 53
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(Integer, Integer, HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.DOMCrossSiteScripting.completed(Integer, Integer, HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "9a6f7099-c1f2-4b95-bbb2-6c92920e8243",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.DOMCrossSiteScriptingVerifier"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/DOMCrossSiteScriptingVerifier.java"
                },
                "region": {
                  "startLine": 50,
                  "endLine": 56
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.DOMCrossSiteScriptingVerifier.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b398e22c-1a2a-4c9d-b55e-abfb9046df95",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.stored.StoredCrossSiteScriptingVerifier"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/stored/StoredCrossSiteScriptingVerifier.java"
                },
                "region": {
                  "startLine": 40,
                  "endLine": 45
                }
              },
              "logicalLocations": [
                {
                  "name": "completed(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.stored.StoredCrossSiteScriptingVerifier.completed(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "dbc1deb5-3881-424f-b7f2-7e49925c7b01",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xss.stored.StoredXssComments"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xss/stored/StoredXssComments.java"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 106
                }
              },
              "logicalLocations": [
                {
                  "name": "createNewComment(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xss.stored.StoredXssComments.createNewComment(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "090a7c0f-b64a-4f72-a947-667f0075af8c",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xxe.BlindSendFileAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xxe/BlindSendFileAssignment.java"
                },
                "region": {
                  "startLine": 88,
                  "endLine": 104
                }
              },
              "logicalLocations": [
                {
                  "name": "addComment(String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xxe.BlindSendFileAssignment.addComment(String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "07982e80-2344-4705-abc3-eef2c59c1f43",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xxe.ContentTypeAssignment"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xxe/ContentTypeAssignment.java"
                },
                "region": {
                  "startLine": 64,
                  "endLine": 85
                }
              },
              "logicalLocations": [
                {
                  "name": "createNewUser(HttpServletRequest, String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xxe.ContentTypeAssignment.createNewUser(HttpServletRequest, String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "5e6e4142-a96d-42ac-a293-d8a70883673d",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xxe.Ping"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xxe/Ping.java"
                },
                "region": {
                  "startLine": 49,
                  "endLine": 59
                }
              },
              "logicalLocations": [
                {
                  "name": "logRequest(String, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xxe.Ping.logRequest(String, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "697f2221-ce6b-4d9f-9b02-dbfc3fc415f9",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.lessons.xxe.SimpleXXE"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/lessons/xxe/SimpleXXE.java"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 84
                }
              },
              "logicalLocations": [
                {
                  "name": "createNewComment(HttpServletRequest, String)",
                  "fullyQualifiedName": "org.owasp.webgoat.lessons.xxe.SimpleXXE.createNewComment(HttpServletRequest, String)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "cdc3977c-7518-4fa8-8c79-bb4c835efe26",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.FileServer"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/FileServer.java"
                },
                "region": {
                  "startLine": 80
                }
              },
              "logicalLocations": [
                {
                  "name": "getFileLocation()",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.FileServer.getFileLocation()",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "1efd070d-5ae8-4b97-b80a-77171bd1beb8",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.FileServer"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/FileServer.java"
                },
                "region": {
                  "startLine": 107,
                  "endLine": 135
                }
              },
              "logicalLocations": [
                {
                  "name": "getFiles(HttpServletRequest, Authentication, TimeZone)",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.FileServer.getFiles(HttpServletRequest, Authentication, TimeZone)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "324698b2-3989-4edc-b984-acb4e120c215",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.FileServer"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/FileServer.java"
                },
                "region": {
                  "startLine": 87,
                  "endLine": 99
                }
              },
              "logicalLocations": [
                {
                  "name": "importFile(MultipartFile, Authentication)",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.FileServer.importFile(MultipartFile, Authentication)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "2d7185b0-dc22-4af4-9852-fe7d61a38b19",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.jwt.JWTController"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/jwt/JWTController.java"
                },
                "region": {
                  "startLine": 26,
                  "endLine": 28
                }
              },
              "logicalLocations": [
                {
                  "name": "decode(MultiValueMap)",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.jwt.JWTController.decode(MultiValueMap)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "c85976b8-db54-4270-adfb-a35157d23d37",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.jwt.JWTController"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/jwt/JWTController.java"
                },
                "region": {
                  "startLine": 36,
                  "endLine": 39
                }
              },
              "logicalLocations": [
                {
                  "name": "encode(MultiValueMap)",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.jwt.JWTController.encode(MultiValueMap)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "55eccc5d-9d78-4fba-b4c7-2909e0f900d3",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.mailbox.MailboxController"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/mailbox/MailboxController.java"
                },
                "region": {
                  "startLine": 46,
                  "endLine": 55
                }
              },
              "logicalLocations": [
                {
                  "name": "mail(Authentication, Model)",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.mailbox.MailboxController.mail(Authentication, Model)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "b54d789b-0f6c-4b78-9253-65ac4f0df351",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.mailbox.MailboxController"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/mailbox/MailboxController.java"
                },
                "region": {
                  "startLine": 61,
                  "endLine": 62
                }
              },
              "logicalLocations": [
                {
                  "name": "sendEmail(Email)",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.mailbox.MailboxController.sendEmail(Email)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "a0fe091a-f5bf-4c5b-a0f9-6a261cbf6bfc",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.requests.LandingPage"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/requests/LandingPage.java"
                },
                "region": {
                  "startLine": 47
                }
              },
              "logicalLocations": [
                {
                  "name": "ok(HttpServletRequest)",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.requests.LandingPage.ok(HttpServletRequest)",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "044fe496-96b4-482c-9a5f-cb3f1db288c0",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Found Spring endpoint",
            "id": "default",
            "arguments": [
              "org.owasp.webgoat.webwolf.requests.Requests"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/org/owasp/webgoat/webwolf/requests/Requests.java"
                },
                "region": {
                  "startLine": 65,
                  "endLine": 74
                }
              },
              "logicalLocations": [
                {
                  "name": "get(Authentication)",
                  "fullyQualifiedName": "org.owasp.webgoat.webwolf.requests.Requests.get(Authentication)",
                  "kind": "function"
                }
              ]
            }
          ]
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}